using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using ArgentinahtlFrontend;
using ArgentinahtlFrontend.NationalService;
using CheckArgentina.Models;
using CheckArgentina.Commons;

namespace CheckArgentina.Managers
{
    public partial class Manager
    {
        protected class NationalManager : ISearchManager
        {
            private HotelesSoapSoap _service;
            private Manager _globalManager;

            public NationalManager(Manager globalManager)
            {
                _globalManager = globalManager;
                _service = new ArgentinahtlFrontend.NationalService.HotelesSoapSoapClient();
            }


            #region Credentials

            public Credential GetCredential(string userKey)
            {
                var credential = new Credential();
                using (var dc = new TurismoDataContext())
                {
                    Guid idUsuario;

                    if (Guid.TryParse(userKey, out idUsuario))
                    {
                        var users = dc.USUARIOs.Where(u => u.IDUSUARIO == idUsuario);

                        if (users.Count() == 1)
                        {
                            credential.Username = users.First().NOMBREUSUARIO;
                            credential.Password = users.First().CLAVE;
                            credential.Language = "es";
                        }
                        else
                        {
                            credential.Username = string.Empty;
                            credential.Password = string.Empty;
                            credential.Language = string.Empty;
                        }
                    }
                }

                return credential;
            }
            #endregion

            private void CompletePetition(PeticionBase petition, Credential credential)
            {
                petition.Usuario = credential.Username;
                petition.Clave = credential.Password;
                petition.IdiomaDeseado = credential.Language;
            }

            public DestinationListModel SearchDestination(string destinationName, Credential userCredential, DestinationModel parent = null)
            {
                SessionData.SearchType = SearchType.National;

                var results = new DestinationListModel();
                var destinations = new List<DestinationModel>();

                var petition = new PeticionBuscarDestinos();
                CompletePetition(petition, userCredential);

                petition.Destino = destinationName;

                var petitionResults = _service.BuscarDestinos(petition);

                if (petitionResults.Estado == EstadoRespuesta.Ok)
                {
                    foreach (var destination in petitionResults.Destinos)
                    {
                        destinations.Add(new DestinationModel()
                            {
                                DestinationId = destination.IdDestino.ToString(),
                                DestinationName = destination.NombreDestino,
                                DestinationType = (DestinationType) destination.TipoDestino
                            });
                    }
                }

                results.Destinations = destinations;

                return results;
            }

            //public LodgingListModel SearchLodging(string destinationId, string destinationType, string lodgingName,
            //    DateTime checkin, DateTime checkout,
            //    int room1, int room2, int room3, int room4, int room5, int room6, string order, Credential userCredential)
            //{
            public LodgingListModel SearchLodging(SearchLodgingRequestModel searchLodgingRequestModel, Credential userCredential)
            {
                SessionData.SearchType = SearchType.National;

                var results = new LodgingListModel();
                var lodgings = new List<LodgingModel>();

                var petition = new PeticionBuscarAlojamientos();
                CompletePetition(petition, userCredential);

                petition.IdDestino = Guid.Parse(searchLodgingRequestModel.DestinationId);
                petition.TipoDestino = (TipoDestino)Enum.Parse(typeof(TipoDestino), searchLodgingRequestModel.DestinationType);

                petition.FechaInicio = searchLodgingRequestModel.Checkin;
                petition.FechaFin = searchLodgingRequestModel.Checkout;

                foreach (var room in searchLodgingRequestModel.Rooms)
                {
                    switch (room.RoomType)
                    {
                        case RoomType.Single:
                        case RoomType.DSU:
                            petition.Habitacion1 = petition.Habitacion1 ?? 0 + room.Count;
                            break;

                        case RoomType.Double:
                        case RoomType.Twin:
                            petition.Habitacion2 = petition.Habitacion2 ?? 0 + room.Count;
                            break;

                        case RoomType.Triple:
                            petition.Habitacion3 = petition.Habitacion3 ?? 0 + room.Count;
                            break;

                        case RoomType.Quad:
                            petition.Habitacion4 = petition.Habitacion4 ?? 0 + room.Count;
                            break;
                    }
                }

                if (!string.IsNullOrEmpty(searchLodgingRequestModel.Order))
                    petition.Orden = (OrdenAlojamientos)Enum.Parse(typeof(OrdenAlojamientos), searchLodgingRequestModel.Order);

                var petitionResults = _service.BuscarAlojamientosEInfo(petition);

                if (petitionResults.Estado == EstadoRespuesta.Ok)
                {
                    foreach (var lodging in petitionResults.AlojamientosDisponibles)
                    {
                        if (searchLodgingRequestModel.LodgingName == "{}" || lodging.Nombre.ToLower().Contains((searchLodgingRequestModel.LodgingName ?? string.Empty).ToLower()))
                        {
                            var lodgingModel = new LodgingModel
                                {
                                    LodgingId = lodging.IdAlojamiento.ToString(),
                                    LodgingName = lodging.Nombre,
                                    LodgingDescription = lodging.Alojamiento.Descripcion,
                                    LodgingCategory = GetCategory(lodging.Alojamiento.Categoria),
                                    LodgingPhoto = lodging.Alojamiento.FotoAlojamientoUrl,
                                    LodgingPrice = CalculateTotalPrice(lodging, petition.Habitacion1 ?? 0, petition.Habitacion2 ?? 0,
                                        petition.Habitacion3 ?? 0, petition.Habitacion4 ?? 0, 0, 0)
                                };

                            var currency = "$";

                            switch (lodging.Moneda.GetValueOrDefault())
                            {
                                case Moneda.ARS: currency = "$"; break;
                                case Moneda.EUR: currency = "€"; break;
                                case Moneda.USD: currency = "U$S"; break;
                            }

                            lodgingModel.LodgingCurrency = currency;
                            lodgingModel.LodgingCurrencyCode = lodging.Moneda.GetValueOrDefault().ToString();

                            var vacancies = new List<VacancyModel>();

                            var vacancyGroups = lodging.Alojamiento.Unidades.GroupBy(u => u.IdUnidad);

                            foreach (var group in vacancyGroups)
                            {
                                var vacancy = group.Select(v => new VacancyModel
                                {
                                    LodgingId = lodgingModel.LodgingId,
                                    LodgingName = lodgingModel.LodgingName,
                                    LodgingCurrency = lodgingModel.LodgingCurrency,
                                    VacancySelected = false,
                                    VacancyId = v.IdUnidad.ToString(),
                                    VacancyName = v.NombreUnidad,
                                    VacancyAdults = v.Personas,
                                    VacancyBeds = v.Camas,
                                    VacancyCount = v.Disponibles,
                                    VacancyPrice = v.MontoPorUnidad,
                                    VacancyCheckin = searchLodgingRequestModel.Checkin,
                                    VacancyCheckout = searchLodgingRequestModel.Checkout,
                                    VacancyDates = group.Select(vg => vg.Fecha).ToList(),
                                    
                                    Available = true,
                                    ConfirmedVacancyPrice = v.MontoPorUnidad,

                                    Rooms = new List<RoomModel>{
                                        new RoomModel{
                                            RoomId = v.IdUnidad.ToString(),
                                            RoomName = v.NombreUnidad,
                                            RoomAdults = v.Personas,
                                            RoomBeds = v.Camas,
                                            RoomCount = v.Disponibles
                                        }
                                    }
                                }).First();

                                vacancies.Add(vacancy);
                            }

                            lodgingModel.Vacancies = vacancies;

                            lodgings.Add(lodgingModel);
                        }
                    }
                }

                results.Lodgings = lodgings;

                return results;
            }

            private int GetCategory(CategoriaAlojamiento category)
            {
                int categoryInt = 5;
                
                switch (category)
                {
                    case CategoriaAlojamiento.Estrellas1: categoryInt = 1; break;
                    case CategoriaAlojamiento.Estrellas2: categoryInt = 2; break;
                    case CategoriaAlojamiento.Estrellas3: categoryInt = 3; break;
                    case CategoriaAlojamiento.Estrellas4: categoryInt = 4; break;
                    case CategoriaAlojamiento.Estrellas5: categoryInt = 5; break;
                    default: categoryInt = 5; break;
                }

                return categoryInt;
            }

            private decimal CalculateTotalPrice(InfoAlojamientoDisponibleCompleta lodging, int room1, int room2, 
                int room3, int room4, int room5, int room6)
            {
                decimal totalPrice = Math.Min(room1, lodging.Cupo1.GetValueOrDefault()) * lodging.Tarifa1.GetValueOrDefault();
                totalPrice += Math.Min(room2, lodging.Cupo2.GetValueOrDefault()) * lodging.Tarifa2.GetValueOrDefault();
                totalPrice += Math.Min(room3, lodging.Cupo3.GetValueOrDefault()) * lodging.Tarifa3.GetValueOrDefault();
                totalPrice += Math.Min(room4, lodging.Cupo4.GetValueOrDefault()) * lodging.Tarifa4.GetValueOrDefault();
                totalPrice += Math.Min(room5, lodging.Cupo5.GetValueOrDefault()) * lodging.Tarifa5.GetValueOrDefault();
                totalPrice += Math.Min(room6, lodging.Cupo6.GetValueOrDefault()) * lodging.Tarifa6.GetValueOrDefault();

                return totalPrice;
            }

            public ReserveModel ConfirmAvailability(ReserveModel reserveModel, Credential userCredential)
            {
                foreach (var vacancy in reserveModel.Vacancies)
                {
                    vacancy.Available = true;
                    vacancy.ConfirmedVacancyPrice = vacancy.VacancyPrice;
                }

                return reserveModel;
            }

            public ReserveModel BlockVacancies(ReserveModel reserveModel, Credential userCredential)
            {
                //var credential = GetCredential(userKey);

                //var petition = new PeticionBloquearAlojamiento();

                //CompletePetition(petition, credential);
                //var unidades = new List<DetalleUnidad>();

                //foreach (var vacancy in reserveModel.Vacancies)
                //{
                //    unidades.Add(new DetalleUnidad() 
                //        {
                //            IdUnidad = Guid.Parse(vacancy.VacancyId),
                //            FechaInicio = vacancy.VacancyDates.Min(),
                //            FechaFin = vacancy.VacancyDates.Max(),
                //            Cantidad = vacancy.VacancyReserved
                //        });
                //}

                //petition.Unidades = unidades.ToArray();
                //petition.MinutosBloqueo = 20;

                //var response = _service.BloquearAlojamiento(petition);

                //if (response.Estado != EstadoRespuesta.Ok)
                //    reserveModel.ReserveStatus = ReserveStatus.Error;
                //else
                //{
                //    reserveModel.ReserveStatus = ReserveStatus.InProcess;
                //    reserveModel.ReserveId = response.CodigoReserva;
                //}
                var ticks = DateTime.Now.Ticks.ToString();
                reserveModel.ReserveId = ticks.Substring(0, Math.Min(ticks.Length, 16));

                return reserveModel;
            }

            public ReserveModel Reserve(ReserveModel reserveModel, Credential userCredential)
            {
                reserveModel.ReserveStatus = ReserveStatus.Error;

                var titular = new InfoPasajero()
                            {
                                Nombre = reserveModel.ReserveOwner.TravelerFistName,
                                Apellido = reserveModel.ReserveOwner.TravelerLastName,
                                Email = reserveModel.ReserveOwner.TravelerEmail,
                                TipoDocumento = MapIdType(reserveModel.ReserveOwner.TravelerIdType),
                                Documento = reserveModel.ReserveOwner.TravelerId,
                                Pais = reserveModel.ReserveOwner.TravelerCountry,
                                FechaNacimiento = DateTime.Today
                            };

                var petition = new PeticionReservarAlojamiento()
                    {
                        Titular = titular,
                        IdAlojamiento = Guid.Parse(reserveModel.LodgingId),
                        IdFormaPago = Guid.Parse(reserveModel.PaymentMethodId)
                    };

                CompletePetition(petition, userCredential);

                var unidades = new List<DetalleUnidad>();

                foreach (var vacancy in reserveModel.Vacancies)
                {
                    foreach(var room in vacancy.Rooms)
                    {
                        unidades.Add(new DetalleUnidad()
                        {
                            IdUnidad = Guid.Parse(room.RoomId),
                            FechaInicio = vacancy.VacancyCheckin,
                            FechaFin = vacancy.VacancyCheckout,
                            Cantidad = vacancy.VacancyReserved,
                            Pasajeros = room.Travelers.Select(t => new InfoPasajero
                            {
                                Nombre = t.TravelerFistName,
                                Apellido = t.TravelerLastName,
                                TipoDocumento = MapIdType(t.TravelerIdType),
                                Documento = t.TravelerFistName,
                                FechaNacimiento = Convert.ToDateTime(t.TravelerBornDate)
                            }).ToArray()
                        });
                    }
                }

                petition.Unidades = unidades.ToArray();

                var response = _service.ReservarAlojamiento(petition);

                if (response.Estado == EstadoRespuesta.Ok)
                    reserveModel.ReserveStatus = ReserveStatus.Reserved;

                return reserveModel;
            }

            private TipoDocumento MapIdType(IdType idType)
            {
                var ret = TipoDocumento.DNI;

                switch (idType)
                { 
                    case IdType.DNI:
                    case IdType.LE:
                    case IdType.LC:
                        ret = TipoDocumento.DNI; break;
                    case IdType.CUIT:
                        ret = TipoDocumento.CUIT; break;
                    case IdType.Pasaporte:
                        ret = TipoDocumento.Pasaporte; break;
                }

                return ret;
            }

            public Dictionary<string, string> GetPaymentMethods()
            {
                using (var dc = new TurismoDataContext())
                {
                    var paymentMethods = new Dictionary<string, string>();

                    var paymentMethodsDB = dc.TIPO_FORMAS_PAGOs
                        .Where(tfp => tfp.ACTIVO && tfp.IDTIPOFORMAPAGO == Guid.Parse("6D5424E4-493A-41AA-821A-41F370A58A86"))
                        .Join(dc.FORMAS_PAGOs.Where(fp => fp.ACTIVO), tfp => tfp.IDTIPOFORMAPAGO, fp => fp.IDTIPOFORMAPAGO,
                            (tfp, fp) => new { PaymentMethodId = fp.IDFORMAPAGO.ToString(), PaymentMethodName = fp.NOMBRE });

                    return paymentMethodsDB.ToDictionary(e => e.PaymentMethodId, e => e.PaymentMethodName);
                }
            }
        }
    }
}